def validate(self, data):
    ctype = data.get("content_type")
    object_pk = data.get("object_pk")
    if ctype is None or object_pk is None:
        raise serializers.ValidationError(
            "Missing content_type or object_pk field."
        )

    try:
        model = apps.get_model(*ctype.split(".", 1))
        target = model._default_manager.get(pk=object_pk)
        whocan = get_app_model_options(content_type=ctype)['who_can_post']

        if whocan == "users" and not self.request.user.is_authenticated:
            raise serializers.ValidationError("User not authenticated")
    except (AttributeError, TypeError, LookupError, ValueError) as e:
        raise serializers.ValidationError(
            f"Invalid content_type value: {escape(ctype)}"
        )
    except model.DoesNotExist:
        raise serializers.ValidationError(
            f"No object matching content-type {escape(ctype)} and object PK {escape(object_pk)} exists."
        )
    except serializers.ValidationError as e:
        raise serializers.ValidationError(
            f"Attempting to get content-type {escape(ctype)} and object PK {escape(object_pk)} raised {e.__class__.__name__}"
        )

    # Signal that the request allows to be authorized.
    responses = should_request_be_authorized.send(
        sender=target.__class__,
        comment=target,
        request=self.request
    )

    for (receiver, response) in responses:
        if response is True:
            # A positive response indicates that the POST request
            # must be trusted. So inject the CommentSecurityForm values
            # to pass the form validation step.
            secform = CommentSecurityForm(target)
            data.update({
                "honeypot": "",
                "timestamp": secform['timestamp'].value(),
                "security_hash": secform['security_hash'].value()
            })
            break

    self.form = get_form()(target, data=data)

    # Check security information.
    if self.form.security_errors():
        raise exceptions.PermissionDenied()
    if self.form.errors:
        raise serializers.ValidationError(self.form.errors)
    
    return data
